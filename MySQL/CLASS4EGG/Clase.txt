USE mi_bd;
/*
-- Ejercicios consultas multitabla  - Parte 1

 select empleados.nombre, empleados.apellido, empleados.edad, empleados.salario, departamentos.nombre 
 from empleados, departamentos 
 where empleados.departamento_id = departamentos.id;
-- Une las tablas de empleados con departamentos y solo muestra las columnas nombre, apellido, edad, 
-- salario de empleados y la columna nombre de departamentos.


select ventas.id,ventas.producto_id,ventas.cliente_id,ventas.cantidad,ventas.precio_unitario,ventas.monto_total,CONCAT(empleados.nombre,' ', empleados.apellido) `Vendedor`
from empleados, ventas 
where empleados.id = ventas.empleado_id;
-- Une las tablas ventas con la tabla empleados donde se muestren todas las columnas de ventas 
-- exceptuando la columna empleado_id y en su lugar muestres el nombre y apellido de la tabla empleados.


select ventas.id,ventas.producto_id,ventas.cliente_id,ventas.cantidad,ventas.precio_unitario,ventas.monto_total,productos.nombre
from productos, ventas where productos.id = ventas.producto_id;
-- Une las tablas ventas con la tabla productos donde se muestren todas las columnas de ventas
--  exceptuando la columna producto_id y en su lugar muestres la columna nombre de la tabla productos.


select ventas.id,ventas.producto_id,clientes.nombre,ventas.cantidad,ventas.precio_unitario,ventas.monto_total
from clientes, ventas where clientes.id = ventas.cliente_id;
-- Une las tablas ventas con la tabla clientes donde se muestren todas las columnas de ventas 
-- exceptuando la columna cliente_id y en su lugar muestres la columna nombre de la tabla clientes.


SELECT ventas.id,ventas.producto_id,ventas.cliente_id,ventas.cantidad,ventas.precio_unitario,ventas.monto_total,
CONCAT(empleados.nombre,' ', empleados.apellido) `Vendedor`, departamentos.nombre `departamento`
FROM ventas, empleados, departamentos 
where empleados.id = ventas.empleado_id AND departamentos.id = empleados.departamento_id;
-- Une las tablas ventas con la tablas empleados y departamentos donde se muestren todas las 
-- columnas de ventas exceptuando la columna empleado_id y en su lugar muestres el nombre y apellido 
-- de la tabla empleados y además muestres la columna nombre de la tabla departamentos.

SELECT ventas.id,productos.nombre `producto`,clientes.nombre `cliente`,ventas.cantidad,ventas.precio_unitario,ventas.monto_total,
CONCAT(empleados.nombre,' ', empleados.apellido) `Vendedor`
FROM ventas, empleados, productos, clientes
where empleados.id = ventas.empleado_id AND clientes.id = ventas.cliente_id AND productos.id = ventas.producto_id;
-- Une las tablas ventas, empleados, productos y clientes donde se muestren las columnas de la
--  tabla ventas reemplazando sus columnas de FOREIGN KEYs con las respectivas columnas de “nombre” de las otras tablas.



SELECT departamentos.nombre, max(empleados.salario) `salario maximo` 
FROM empleados, departamentos 
WHERE empleados.departamento_id = departamentos.id group by departamentos.id order by `salario maximo` asc;
-- Calcular el salario máximo de los empleados en cada departamento y mostrar el nombre del
--  departamento junto con el salario máximo.
*/


/*
--                              Ejercicios consultas multitabla - Parte 2 


SELECT departamentos.nombre, sum(ventas.monto_total) `monto total` 
FROM empleados, departamentos, ventas
WHERE empleados.departamento_id = departamentos.id and empleados.id = ventas.empleado_id group by departamentos.id;
-- Calcular el monto total de ventas por departamento y mostrar el nombre del 
-- departamento junto con el monto total de ventas.
*/
/*
SELECT departamentos.nombre, min(empleados.edad) `Edad`
FROM empleados, departamentos
WHERE empleados.departamento_id = departamentos.id group by departamentos.id;
-- Encontrar el empleado más joven de cada departamento y mostrar el nombre del 
-- departamento junto con la edad del empleado más joven.
*/
/*
SELECT ventas.cantidad, productos.nombre,
CASE 
        WHEN ventas.cantidad < 5 THEN 'bajo'
        WHEN ventas.cantidad < 8 THEN 'medio'
        ELSE 'alto'
END AS 'volumen'

FROM ventas, productos
WHERE ventas.producto_id = productos.id group by ventas.id order by ventas.cantidad desc;
-- Calcular el volumen de productos vendidos por cada producto (por ejemplo, menos 
-- de 5 “bajo”, menos 8 “medio” y mayor o igual a 8 “alto”) y mostrar la categoría de 
-- volumen junto con la cantidad y el nombre del producto.
*/

/*
SELECT clientes.nombre, sum(ventas.monto_total) `monto_total`
FROM clientes, ventas
WHERE ventas.cliente_id = clientes.id group by clientes.id order by monto_total desc limit 1;
-- Encontrar el cliente que ha realizado el mayor monto total de compras y mostrar 
-- su nombre y el monto total.
*/
/*
SELECT empleados.nombre, AVG(productos.precio) AS precio_promedio
FROM ventas, empleados, productos
WHERE ventas.empleado_id = empleados.id
AND ventas.producto_id = productos.id
GROUP BY empleados.id;
-- Calcular el precio promedio de los productos vendidos por cada empleado y mostrar el 
-- nombre del empleado junto con el precio promedio de los productos que ha vendido.
*/
/*
SELECT departamentos.nombre, MIN(empleados.salario) `salario mínimo`
FROM empleados, departamentos
WHERE empleados.departamento_id = departamentos.id
GROUP BY departamentos.id
ORDER BY `salario mínimo` ASC
LIMIT 1;
-- Encontrar el departamento con el salario mínimo más bajo entre los empleados y mostrar 
-- el nombre del departamento junto con el salario mínimo más bajo.
*/
/*
SELECT departamentos.nombre, AVG(empleados.salario) `salario promedio`
FROM empleados, departamentos
WHERE empleados.departamento_id = departamentos.id
AND empleados.edad > 30
GROUP BY departamentos.id
HAVING AVG(empleados.salario) > 3320
ORDER BY `salario promedio` DESC;
-- Encontrar el departamento con el salario promedio más alto entre los empleados mayores de 
-- 30 años y mostrar el nombre del departamento junto con el salario promedio. Limita los 
-- resultados a mostrar solo los departamentos con el salario promedio mayor a 3320.
*/

/*
-- Ejercicios complementarios

-- 1. Encontrar la cantidad de productos vendidos por cada empleado y mostrar el nombre del empleado junto con la cantidad de productos vendidos.
SELECT CONCAT(empleados.nombre, ' ', empleados.apellido) AS `empleado`, SUM(ventas.cantidad) AS `productos vendidos`
FROM empleados, ventas
WHERE empleados.id = ventas.empleado_id
GROUP BY empleados.id;

-- 2. Calcular el monto total de ventas por cada cliente y mostrar el nombre del cliente junto con el monto total de sus compras.
SELECT clientes.nombre, SUM(ventas.monto_total) AS `monto total`
FROM clientes, ventas
WHERE clientes.id = ventas.cliente_id
GROUP BY clientes.id;

-- 3. Encontrar el producto más caro vendido y mostrar su nombre y precio.
SELECT productos.nombre, MAX(productos.precio) AS `precio más caro`
FROM productos, ventas
WHERE productos.id = ventas.producto_id GROUP BY clientes.id;

-- 4. Calcular el salario promedio de los empleados en cada departamento y mostrar el nombre del departamento junto con el salario promedio.
SELECT departamentos.nombre, AVG(empleados.salario) AS `salario promedio`
FROM empleados, departamentos
WHERE empleados.departamento_id = departamentos.id
GROUP BY departamentos.id;

-- 5. Encontrar la cantidad total de ventas realizadas por cada empleado y mostrar el nombre y apellido del empleado junto con la cantidad total de ventas.
SELECT CONCAT(empleados.nombre, ' ', empleados.apellido) AS `empleado`, COUNT(ventas.id) AS `total ventas`
FROM empleados, ventas
WHERE empleados.id = ventas.empleado_id
GROUP BY empleados.id;

-- 6. Encuentra la cantidad de ventas realizadas por cada empleado y muestra el nombre y apellido del empleado junto con la cantidad total de ventas. Limita los resultados a mostrar solo a los empleados que hayan realizado más de 5 ventas y ordénalos de forma descendente con respecto a la cantidad de ventas.
SELECT CONCAT(empleados.nombre, ' ', empleados.apellido) AS `empleado`, COUNT(ventas.id) AS `total ventas`
FROM empleados, ventas
WHERE empleados.id = ventas.empleado_id
GROUP BY empleados.id
HAVING COUNT(ventas.id) > 5
ORDER BY `total ventas` DESC;

-- 7. Calcula el monto total vendido por cada empleado y muestra el nombre del empleado junto con el monto total. Usa la cláusula HAVING para filtrar a aquellos empleados que hayan vendido más de 10 productos en total. Muestra el resultado en orden descendente según el monto total vendido.
SELECT CONCAT(empleados.nombre, ' ', empleados.apellido) AS `empleado`, SUM(ventas.monto_total) AS `monto total`
FROM empleados, ventas
WHERE empleados.id = ventas.empleado_id
GROUP BY empleados.id
HAVING SUM(ventas.cantidad) > 10
ORDER BY `monto total` DESC;

-- 8. Encuentra el monto total vendido a cada cliente y muestra el nombre del cliente junto con el monto total. Usa la cláusula HAVING para filtrar a aquellos clientes cuyo monto total promedio en sus compras sea superior a $1500. Muestra el resultado en orden descendente según el monto total vendido.
SELECT clientes.nombre, SUM(ventas.monto_total) AS `monto total`
FROM clientes, ventas
WHERE clientes.id = ventas.cliente_id
GROUP BY clientes.id
HAVING AVG(ventas.monto_total) > 1500
ORDER BY `monto total` DESC;

-- 9. Calcula la cantidad total de ventas realizadas a cada cliente y muestra el nombre del cliente junto con la cantidad total de ventas. Limita los resultados a mostrar solo a los clientes que hayan realizado más de 3 ventas, y ordénalos de forma descendente según la cantidad de ventas.
SELECT clientes.nombre, COUNT(ventas.id) AS `total ventas`
FROM clientes, ventas
WHERE clientes.id = ventas.cliente_id
GROUP BY clientes.id
HAVING COUNT(ventas.id) > 3
ORDER BY `total ventas` DESC;

-- 10. Encuentra los productos más caros vendidos (precio mayor a 1000), muestra su nombre y precio, y ordénalos de forma descendente por precio.
SELECT productos.nombre, productos.precio
FROM productos, ventas
WHERE productos.id = ventas.producto_id AND productos.precio > 1000
ORDER BY productos.precio DESC;
*/